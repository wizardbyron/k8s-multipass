#!/usr/bin/env bash
MIRROR_URL="mirrors.tencent.com"
NODES=2
DOMAIN="k8s.local"

function cluster_cmd(){
    COMMAND=$1 # start/stop/restart/delete
    for INSTANCE in $(multipass list|grep k8s-|awk '{print $1}');do
        multipass $COMMAND $INSTANCE &
    done
    wait
}

function setup_control_plane(){
    K8S_VER=$1
    multipass launch --name k8s-cp --cpus 4 --mem 4G --disk 40G \
        --mount $(pwd)/scripts/:/var/host/scripts\
        --mount $(pwd)/share/:/var/host/share
    if [ $? -eq 0 ];then
        multipass exec k8s-cp -- sh -c "/var/host/scripts/init.sh $MIRROR_URL"
        multipass exec k8s-cp -- sh -c "/var/host/scripts/nfs/server.sh"
        multipass exec k8s-cp -- sh -c "/var/host/scripts/k8s/install.sh $K8S_VER"
        multipass exec k8s-cp -- sh -c "/var/host/scripts/k8s/setup-control-plane.sh"
    fi
}

function setup_node(){
    K8S_VER=$1
    INDEX=$2
    MASTER_IP=$(multipass list|grep k8s-cp|awk '{print $3}')
    multipass launch --name k8s-node-$INDEX --cpus 2 --mem 2G --disk 10G \
        --mount $(pwd)/scripts:/var/host/scripts \
        --mount $(pwd)/share:/var/host/share
    if [ $? -eq 0 ];then
        multipass exec k8s-node-$INDEX -- sh -c "/var/host/scripts/init.sh $MIRROR_URL"
        multipass exec k8s-node-$INDEX -- sh -c "/var/host/scripts/nfs/client.sh $MASTER_IP"
        multipass exec k8s-node-$INDEX -- sh -c "/var/host/scripts/k8s/install.sh $K8S_VER"
        multipass exec k8s-node-$INDEX -- sh -c "/var/host/scripts/k8s/setup-worker-node.sh"
    fi
}

function create_cluster(){
    K8S_VER=$1
    setup_control_plane $K8S_VER
    INDEX=0
    while [ "$INDEX" -lt "$NODES" ]
    do
        INDEX=`expr $INDEX + 1`
        setup_node $K8S_VER $INDEX &
    done
    wait
}

function check_work_nodes_ready(){
    NOT_READY_NODES=$(multipass exec k8s-cp -- kubectl get nodes|grep "NotReady"|wc -l)
    if [ "$NOT_READY_NODES" -gt 0 ];then
        echo "These node(s) are not ready:"
        multipass exec k8s-cp -- kubectl get nodes|grep "NotReady"
    else
        echo "All nodes are ready."
    fi
}

function check_all_pods_running(){
    NOT_RUNNING_PODS=$(multipass exec k8s-cp -- kubectl get pod -A|grep -v "Running"|grep -v "NAMESPACE"|wc -l)
    if [ "$NOT_RUNNING_PODS" -gt 0 ];then
        echo "These pod(s) are not ready:"
        multipass exec k8s-cp -- kubectl get pod -A|grep -v "Running"
    else
        echo "All pods are running."
    fi

}

function check_all_nodes_ready(){
    CONTROL_PLANE_STATUS=$(multipass list|grep k8s-cp|awk '{print $2}')
    if [ "$CONTROL_PLANE_STATUS" == "Running" ];then
        check_work_nodes_ready
        check_all_pods_running
        exit 0
    else
        echo  "ERROR: k8s-cp instance is not running."
        exit 1
    fi
}


COMMAND=$1
SUB_COMMAND=$2

case $COMMAND in
"create")
    if [ -z "$SUB_COMMAND" ];then
        echo "Kubernetes version MUST BE given to create a cluster."
        echo "Available Versions:"
        echo "  1.23"
        echo "  1.22"
        echo "  1.21"
        echo "  1.20"
        exit 1
    else
        create_cluster $SUB_COMMAND
    fi
    ;;
"destroy")
    if [ -n "$SUB_COMMAND" ];then
        multipass delete -p $SUB_COMMAND
    else
        cluster_cmd stop
        cluster_cmd delete
        multipass purge
    fi
    ;;
"start")
    cluster_cmd start
    ;;
"stop")
    cluster_cmd stop
    ;;
"restart")
    cluster_cmd restart
    ;;
"check")
    check_all_nodes_ready
    ;;
"status")
    multipass list|grep k8s-
    ;;
"login")
    multipass shell k8s-cp
    ;;
*)
    echo "usage: ./k8sctl [create <version>|destroy|start|stop|restart|check|status|login]"
esac
